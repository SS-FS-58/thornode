# Image Hashes
STATE_CHAIN_IMAGE_HASH=$(shell  grep "Successfully built" ./log/state-chain-build.log | cut -d ' ' -f 3)

# Turn off cache
ifeq (${NOCACHE}, TRUE)
CACHE=--no-cache
endif

.PHONY: config
config:
	@echo ENV: ${ENV}
	@echo NET: ${NET}
	@echo POOL_ADDRESS: ${POOL_ADDRESS}
	@echo START_BLOCK_HEIGHT: ${START_BLOCK_HEIGHT}
	@echo CACHE: ${CACHE}
	@echo ECS_CLUSTER: ${ECS_CLUSTER}
	@echo INFLUX_HOST: ${INFLUX_HOST}
	@echo REGISTRY_ID: ${REGISTRY_ID}
	@echo REPOSITORY: ${REPOSITORY}
	@echo ECR_STATECHAIN: ${ECR_STATECHAIN}
	@echo ECR_CHAIN_SVC: ${ECR_CHAIN_SVC}
	@echo STATE_CHAIN_IMAGE_HASH: ${STATE_CHAIN_IMAGE_HASH}
	@echo CHAIN_SERVICE_IMAGE_HASH: ${CHAIN_SERVICE_IMAGE_HASH}

.PHONY: docker-clean
docker-clean:
	rm -rf ./log

.PHONY: aws-login
aws-login:
	aws configure set aws_access_key_id ${AWS_ACCESS_KEY_ID}
	aws configure set aws_secret_access_key ${AWS_SECRET_ACCESS_KEY}
	aws configure set region ${AWS_REGION}
	$(shell aws ecr get-login --no-include-email --region ap-southeast-2)

.PHONY: logger
logger:
	mkdir -p ./log

# Step 1
docker-aws-build: logger
	./scripts/build.sh 526267067157.dkr.ecr.ap-southeast-2.amazonaws.com/${ECR_STATECHAIN}:latest | tee ./log/state-chain-build.log

# Step 2
docker-aws-tag: docker-build
	docker tag ${REGISTRY_ID}.${REPOSITORY}/${ECR_STATECHAIN}:latest ${REGISTRY_ID}.${REPOSITORY}/${ECR_STATECHAIN}:${STATE_CHAIN_IMAGE_HASH}

# Step 3
docker-aws-push: docker-aws-tag
	docker push ${REGISTRY_ID}.${REPOSITORY}/${ECR_STATECHAIN}:${STATE_CHAIN_IMAGE_HASH}
	docker push ${REGISTRY_ID}.${REPOSITORY}/${ECR_STATECHAIN}:latest

# Step 4
aws-ecs-deploy: config docker-aws-push
	aws ecs update-service --force-new-deployment --cluster ${ECS_CLUSTER} --service ${ECR_STATECHAIN}

# Step 5
smoke-test:
	./scripts/smoke.sh -r ${RPC_HOST} -g ${TARGET_GROUP_NAME} -c ${ECS_CLUSTER} -s ${ECS_SERVICE} -n ${TASK_COUNT} -f ${FAUCET_KEY} -p ${BINANCE_PRIVATE_KEY} -e ${ENV}

# Step 6
seed:
	@bsinner -f ${FAUCET_KEY} -p ${BINANCE_PRIVATE_KEY} -e ${ENV} -c seed/seed.json -d true

# ------------------------------- GitLabs ------------------------------- #

docker-gitlabs-login:
	docker login -u ${CI_REGISTRY_USER} -p ${CI_REGISTRY_PASSWORD} ${CI_REGISTRY}

docker-gitlabs-build: docker-gitlabs-login
	./scripts/build.sh registry.gitlab.com/thorchain/bepswap/thornode:latest | tee ./log/state-chain-build.log

docker-gitlabs-tag: docker-gitlabs-build
	docker tag registry.gitlab.com/thorchain/bepswap/thornode:latest registry.gitlab.com/thorchain/bepswap/thornode:${STATE_CHAIN_IMAGE_HASH}

docker-gitlabs-push: docker-gitlabs-tag
	docker push registry.gitlab.com/thorchain/bepswap/thornode:latest
